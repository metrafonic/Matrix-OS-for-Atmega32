
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000002a6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800094  00800094  0000036e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000008b  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a8  00000000  00000000  00000419  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013d  00000000  00000000  00000ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000463  00000000  00000000  00000bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000170  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000033f  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00001583  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 83 00 	call	0x106	; 0x106 <main>
  8a:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Peek_A_Boo>:
	
	DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
 }

void Peek_A_Boo(){
	MrLCDsControl |=1<<LightSwitch;
  92:	95 9a       	sbi	0x12, 5	; 18
	asm volatile("nop");
  94:	00 00       	nop
	asm volatile("nop");
  96:	00 00       	nop
	MrLCDsControl &= ~1<<LightSwitch;
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	80 7c       	andi	r24, 0xC0	; 192
  9c:	82 bb       	out	0x12, r24	; 18
}
  9e:	08 95       	ret

000000a0 <Check_If_MrLCD_IsBuisy>:
	
	}
}

void Check_If_MrLCD_IsBuisy(){
	DataDir_MrLCDsCrib = 0; //input mode
  a0:	17 ba       	out	0x17, r1	; 23
	MrLCDsControl |= 1<<ReadWrite;
  a2:	97 9a       	sbi	0x12, 7	; 18
	MrLCDsControl &= ~1<<BiPolarMood;
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	88 7f       	andi	r24, 0xF8	; 248
  a8:	82 bb       	out	0x12, r24	; 18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <Check_If_MrLCD_IsBuisy+0x10>
	
	while(MrLCDsCrib >= 0x80){ //
		Peek_A_Boo();
  ac:	0e 94 49 00 	call	0x92	; 0x92 <Peek_A_Boo>
void Check_If_MrLCD_IsBuisy(){
	DataDir_MrLCDsCrib = 0; //input mode
	MrLCDsControl |= 1<<ReadWrite;
	MrLCDsControl &= ~1<<BiPolarMood;
	
	while(MrLCDsCrib >= 0x80){ //
  b0:	c7 99       	sbic	0x18, 7	; 24
  b2:	fc cf       	rjmp	.-8      	; 0xac <Check_If_MrLCD_IsBuisy+0xc>
		Peek_A_Boo();
	}
	
	DataDir_MrLCDsCrib = 0xFF; //0xFF means 0b11111111
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	87 bb       	out	0x17, r24	; 23
 }
  b8:	08 95       	ret

000000ba <Send_A_Command>:
	MrLCDsControl |=1<<LightSwitch;
	asm volatile("nop");
	asm volatile("nop");
	MrLCDsControl &= ~1<<LightSwitch;
}
void Send_A_Command(unsigned char command){
  ba:	1f 93       	push	r17
  bc:	18 2f       	mov	r17, r24
	Check_If_MrLCD_IsBuisy();
  be:	0e 94 50 00 	call	0xa0	; 0xa0 <Check_If_MrLCD_IsBuisy>
	MrLCDsCrib = command;
  c2:	18 bb       	out	0x18, r17	; 24
	MrLCDsControl &= ~ (1<<ReadWrite|1<<BiPolarMood);
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	8b 77       	andi	r24, 0x7B	; 123
  c8:	82 bb       	out	0x12, r24	; 18
	Peek_A_Boo();
  ca:	0e 94 49 00 	call	0x92	; 0x92 <Peek_A_Boo>
	MrLCDsCrib = 0;
  ce:	18 ba       	out	0x18, r1	; 24
}
  d0:	1f 91       	pop	r17
  d2:	08 95       	ret

000000d4 <Send_A_Character>:
void Send_A_Character(unsigned char character){
  d4:	1f 93       	push	r17
  d6:	18 2f       	mov	r17, r24
	
	Check_If_MrLCD_IsBuisy();
  d8:	0e 94 50 00 	call	0xa0	; 0xa0 <Check_If_MrLCD_IsBuisy>
	MrLCDsCrib = character;
  dc:	18 bb       	out	0x18, r17	; 24
	MrLCDsControl &= ~ (1<<ReadWrite);
  de:	97 98       	cbi	0x12, 7	; 18
	MrLCDsControl |= 1<<BiPolarMood;
  e0:	92 9a       	sbi	0x12, 2	; 18
	Peek_A_Boo();
  e2:	0e 94 49 00 	call	0x92	; 0x92 <Peek_A_Boo>
	MrLCDsCrib = 0;
  e6:	18 ba       	out	0x18, r1	; 24
}
  e8:	1f 91       	pop	r17
  ea:	08 95       	ret

000000ec <Send_A_String>:

void Send_A_String(char *StringofCharacters){
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	ec 01       	movw	r28, r24
  f2:	03 c0       	rjmp	.+6      	; 0xfa <Send_A_String+0xe>

	while(*StringofCharacters>0){
		Send_A_Character(*StringofCharacters++);
  f4:	21 96       	adiw	r28, 0x01	; 1
  f6:	0e 94 6a 00 	call	0xd4	; 0xd4 <Send_A_Character>
	MrLCDsCrib = 0;
}

void Send_A_String(char *StringofCharacters){

	while(*StringofCharacters>0){
  fa:	88 81       	ld	r24, Y
  fc:	88 23       	and	r24, r24
  fe:	d1 f7       	brne	.-12     	; 0xf4 <Send_A_String+0x8>
		Send_A_Character(*StringofCharacters++);
	}
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <main>:
void Send_A_Command(unsigned char command);
void Send_A_Character(unsigned char character);
void Send_A_String(char *StringofCharacters);
int prosent = 0;

void main(void){
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29

	DataDir_MrLCDsControl |= 1<<LightSwitch | 1<<ReadWrite |1<<BiPolarMood;
 112:	81 b3       	in	r24, 0x11	; 17
 114:	84 6a       	ori	r24, 0xA4	; 164
 116:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 118:	80 e3       	ldi	r24, 0x30	; 48
 11a:	95 e7       	ldi	r25, 0x75	; 117
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x16>
	_delay_ms(15);
	
	Send_A_Command(0x01); //Clears screen 0x01 == 00000001
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 5d 00 	call	0xba	; 0xba <Send_A_Command>
 126:	80 ea       	ldi	r24, 0xA0	; 160
 128:	9f e0       	ldi	r25, 0x0F	; 15
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x24>
	_delay_ms(2);
	Send_A_Command(0x38);
 12e:	88 e3       	ldi	r24, 0x38	; 56
 130:	0e 94 5d 00 	call	0xba	; 0xba <Send_A_Command>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 134:	15 e8       	ldi	r17, 0x85	; 133
 136:	81 2f       	mov	r24, r17
 138:	8a 95       	dec	r24
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x32>
	_delay_us(50);
	Send_A_Command(0b00001110);
 13c:	8e e0       	ldi	r24, 0x0E	; 14
 13e:	0e 94 5d 00 	call	0xba	; 0xba <Send_A_Command>
 142:	1a 95       	dec	r17
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0x3c>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 146:	00 ea       	ldi	r16, 0xA0	; 160
 148:	1f e0       	ldi	r17, 0x0F	; 15
	Send_A_Character(0x64); //
	Send_A_Character(0x69); //
	Send_A_Character(0x61); //
	*/
	while(1){
		Send_A_Command(0x01); //Clears screen 0x01 == 00000001
 14a:	c8 ec       	ldi	r28, 0xC8	; 200
 14c:	d0 e0       	ldi	r29, 0x00	; 0
 14e:	80 e3       	ldi	r24, 0x30	; 48
 150:	e8 2e       	mov	r14, r24
 152:	85 e7       	ldi	r24, 0x75	; 117
 154:	f8 2e       	mov	r15, r24
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 5d 00 	call	0xba	; 0xba <Send_A_Command>
 15c:	c8 01       	movw	r24, r16
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x58>
		_delay_ms(2);
		Send_A_String("Booting");
 162:	80 e6       	ldi	r24, 0x60	; 96
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 76 00 	call	0xec	; 0xec <Send_A_String>
 16a:	84 ef       	ldi	r24, 0xF4	; 244
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	fe 01       	movw	r30, r28
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0x6a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 174:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 176:	d9 f7       	brne	.-10     	; 0x16e <main+0x68>
		_delay_ms(50);
		Send_A_String(".");
 178:	88 e6       	ldi	r24, 0x68	; 104
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 76 00 	call	0xec	; 0xec <Send_A_String>
 180:	84 ef       	ldi	r24, 0xF4	; 244
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	fe 01       	movw	r30, r28
 186:	31 97       	sbiw	r30, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18c:	d9 f7       	brne	.-10     	; 0x184 <main+0x7e>
		_delay_ms(50);
		Send_A_String(".");
 18e:	88 e6       	ldi	r24, 0x68	; 104
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 76 00 	call	0xec	; 0xec <Send_A_String>
 196:	84 ef       	ldi	r24, 0xF4	; 244
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	fe 01       	movw	r30, r28
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a2:	d9 f7       	brne	.-10     	; 0x19a <main+0x94>
		_delay_ms(50);
		Send_A_String(".");
 1a4:	88 e6       	ldi	r24, 0x68	; 104
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 76 00 	call	0xec	; 0xec <Send_A_String>
 1ac:	88 ee       	ldi	r24, 0xE8	; 232
 1ae:	93 e0       	ldi	r25, 0x03	; 3
 1b0:	fe 01       	movw	r30, r28
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0xac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b8:	d9 f7       	brne	.-10     	; 0x1b0 <main+0xaa>
		_delay_ms(100);
		
		Send_A_Command(0x01); //Clears screen 0x01 == 00000001
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 5d 00 	call	0xba	; 0xba <Send_A_Command>
 1c0:	c8 01       	movw	r24, r16
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0xbc>
		_delay_ms(2);
		Send_A_String("Loading Kernel");
 1c6:	8a e6       	ldi	r24, 0x6A	; 106
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 76 00 	call	0xec	; 0xec <Send_A_String>
 1ce:	84 ef       	ldi	r24, 0xF4	; 244
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	fe 01       	movw	r30, r28
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <main+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1da:	d9 f7       	brne	.-10     	; 0x1d2 <main+0xcc>
		_delay_ms(50);
		Send_A_String(".");
 1dc:	88 e6       	ldi	r24, 0x68	; 104
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 76 00 	call	0xec	; 0xec <Send_A_String>
 1e4:	84 ef       	ldi	r24, 0xF4	; 244
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	fe 01       	movw	r30, r28
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f0:	d9 f7       	brne	.-10     	; 0x1e8 <main+0xe2>
		_delay_ms(50);
		Send_A_String(".");
 1f2:	88 e6       	ldi	r24, 0x68	; 104
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 76 00 	call	0xec	; 0xec <Send_A_String>
 1fa:	84 ef       	ldi	r24, 0xF4	; 244
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	fe 01       	movw	r30, r28
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <main+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 204:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 206:	d9 f7       	brne	.-10     	; 0x1fe <main+0xf8>
		_delay_ms(50);
		Send_A_String(".");
 208:	88 e6       	ldi	r24, 0x68	; 104
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 76 00 	call	0xec	; 0xec <Send_A_String>
 210:	80 ed       	ldi	r24, 0xD0	; 208
 212:	97 e0       	ldi	r25, 0x07	; 7
 214:	fe 01       	movw	r30, r28
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <main+0x110>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 21a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 21c:	d9 f7       	brne	.-10     	; 0x214 <main+0x10e>
 21e:	1a c0       	rjmp	.+52     	; 0x254 <main+0x14e>
		_delay_ms(200);
		
		while(prosent<101){
			Send_A_Command(0x01); //Clears screen 0x01 == 00000001
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 5d 00 	call	0xba	; 0xba <Send_A_Command>
 226:	c8 01       	movw	r24, r16
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x122>
			_delay_ms(2);
			Send_A_String(" " + prosent);
 22c:	80 91 94 00 	lds	r24, 0x0094
 230:	90 91 95 00 	lds	r25, 0x0095
 234:	87 58       	subi	r24, 0x87	; 135
 236:	9f 4f       	sbci	r25, 0xFF	; 255
 238:	0e 94 76 00 	call	0xec	; 0xec <Send_A_String>
 23c:	c7 01       	movw	r24, r14
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <main+0x138>
			_delay_ms(15);
			prosent++;
 242:	80 91 94 00 	lds	r24, 0x0094
 246:	90 91 95 00 	lds	r25, 0x0095
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	90 93 95 00 	sts	0x0095, r25
 250:	80 93 94 00 	sts	0x0094, r24
		Send_A_String(".");
		_delay_ms(50);
		Send_A_String(".");
		_delay_ms(200);
		
		while(prosent<101){
 254:	80 91 94 00 	lds	r24, 0x0094
 258:	90 91 95 00 	lds	r25, 0x0095
 25c:	85 36       	cpi	r24, 0x65	; 101
 25e:	91 05       	cpc	r25, r1
 260:	fc f2       	brlt	.-66     	; 0x220 <main+0x11a>
			_delay_ms(2);
			Send_A_String(" " + prosent);
			_delay_ms(15);
			prosent++;
		}
		prosent=0;
 262:	10 92 95 00 	sts	0x0095, r1
 266:	10 92 94 00 	sts	0x0094, r1
		
		Send_A_Command(0x01); //Clears screen 0x01 == 00000001
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 5d 00 	call	0xba	; 0xba <Send_A_Command>
 270:	c8 01       	movw	r24, r16
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <main+0x16c>
		_delay_ms(2);
		Send_A_String("      MATRIX-OS v10.4.5");
 276:	8b e7       	ldi	r24, 0x7B	; 123
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 76 00 	call	0xec	; 0xec <Send_A_String>
 27e:	88 eb       	ldi	r24, 0xB8	; 184
 280:	9b e0       	ldi	r25, 0x0B	; 11
 282:	fe 01       	movw	r30, r28
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x17e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 288:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28a:	d9 f7       	brne	.-10     	; 0x282 <main+0x17c>
		_delay_ms(300);
		
		Send_A_Command(0x01); //Clears screen 0x01 == 00000001
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 5d 00 	call	0xba	; 0xba <Send_A_Command>
 292:	88 eb       	ldi	r24, 0xB8	; 184
 294:	9b e0       	ldi	r25, 0x0B	; 11
 296:	fe 01       	movw	r30, r28
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29e:	d9 f7       	brne	.-10     	; 0x296 <main+0x190>
 2a0:	5a cf       	rjmp	.-332    	; 0x156 <main+0x50>

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
